-- require "lua/common/data/NotUserCityConfig"

module("Table", package.seeall)

-- 特殊字段解析

function Skill.parser(row)
    --    row["CDamage"] = row["CDamage"] * 0.01;
    --    row["CVariation"] = row["CVariation"] * 0.01;
    -- row["sprayPower"] = row["sprayPower"] * 0.01;
    -- row["CSpray"] = row["CSpray"] * 0.01;
    -- row["fightAnimTime"] = row["fightAnimTime"] * 0.001;
    -- row["duration"] = row["duration"] * 0.001;
    -- --    row["perDamageOverTime"] = row["perDamageOverTime"] * 0.001;
    -- row["endFightAnimTime"] = row["endFightAnimTime"] * 0.001;
    -- local attackPriority = row["attackPriority"];
    -- if attackPriority ~= nil then
    --     local priorityArr = string.split(attackPriority, ";");
    --     row["attackPriority"] = priorityArr;
    -- end
    -- buffGrowthParams和buffParams可能表里不填。然后公式计算的时候转换成整数会报错
    --    if row["buffGrowthParams"] == "" then
    --        row["buffGrowthParams"] = "0";
    --    end

    --    if row["buffParams"] == "" then
    --        row["buffParams"] = "0";
    --    end
    --    if row["params"] ~= "" then
    --        row["paramsSwitch"] = {};
    --        local param = string.split( row["params"], ";" );
    --        for k, v in pairs(param) do
    --            local oneParam = string.split( param[k], ":" );
    --            if #oneParam == 2 then
    --                local paramKey = tonumber(oneParam[1])
    --                local paramValue = oneParam[2]
    --                if paramKey == TDSkillParamID.FanBullet then
    --                    local bulletValue = string.split( paramValue, "," );
    --                    row.bulletNum = tonumber(bulletValue[1]);
    --                    row.bulletAngle = tonumber(bulletValue[2]);
    --                    row["paramsSwitch"][TDSkillParamID.FanBullet] = true;
    --                elseif paramKey == TDSkillParamID.SummonUnit then
    --                    local summonValue = string.split( paramValue, "," );
    --                    row.summonUnitID = tonumber(summonValue[1]);
    --                    row.summonUnitTime = tonumber(summonValue[2]) * 0.001;
    --                    if summonValue[3] ~= nil then
    --                        row.summonUnitCount = tonumber(summonValue[3]);
    --                    else
    --                        row.summonUnitCount = 1;
    --                    end
    --                    if summonValue[4] ~= nil then
    --                        row.summonUnitDieWithHost = tonumber(summonValue[4]);
    --                    else
    --                        row.summonUnitDieWithHost = 1;
    --                    end
    --                    if summonValue[5] ~= nil then
    --                        row.summonUnitReplaceOldUnit = tonumber(summonValue[5]);
    --                    else
    --                        row.summonUnitReplaceOldUnit = 1;
    --                    end
    --                    if summonValue[6] ~= nil then
    --                        row.summonUnitAppearTime = tonumber(summonValue[6]);
    --                    else
    --                        row.summonUnitAppearTime = CommonDefine.SOLDIER_APPEAR_TIME;
    --                    end
    --                    row["paramsSwitch"][TDSkillParamID.SummonUnit] = true;
    --                 elseif paramKey == TDSkillParamID.CreateTargetPoint then
    --                    local bulletValue = string.split( paramValue, "," );
    --                    row.targetPoint_Radius = tonumber(bulletValue[1]);
    --                    row.targetPoint_Num = tonumber(bulletValue[2]);
    --                    row["paramsSwitch"][TDSkillParamID.CreateTargetPoint] = true;
    --                elseif paramKey == TDSkillParamID.BulletNum then
    --                    row.bulletNum = tonumber(paramValue);
    --                    row["paramsSwitch"][TDSkillParamID.BulletNum] = true;
    --                elseif paramKey == TDSkillParamID.CreatePointTowardTarget then
    --                    row.createPointDistance = tonumber(paramValue);
    --                    row["paramsSwitch"][TDSkillParamID.CreatePointTowardTarget] = true;
    --                elseif paramKey == TDSkillParamID.FanAffectTarget then
    --                    local fanValue = string.split( paramValue, "," );
    --                    row.fanAffectRadius = tonumber(fanValue[1]);
    --                    row.fanAffectAngle = tonumber(fanValue[2]);
    --                    row["paramsSwitch"][TDSkillParamID.FanAffectTarget] = true;
    --                elseif paramKey == TDSkillParamID.RectangleAffectTarget then
    --                    local RectangleValue = string.split( paramValue, "," );
    --                    row.rectangleAffectWidth = tonumber(RectangleValue[1]);
    --                    row.rectangleAffectLenght = tonumber(RectangleValue[2]);
    --                    row["paramsSwitch"][TDSkillParamID.RectangleAffectTarget] = true;
    --                elseif paramKey == TDSkillParamID.MinimumReleaseDistance then
    --                    row.minimumReleaseDistance = tonumber(paramValue);
    --                    row["paramsSwitch"][TDSkillParamID.MinimumReleaseDistance] = true;
    --                elseif paramKey == TDSkillParamID.GrassArea then
    --                    row.grassArea = tonumber(paramValue);
    --                    row["paramsSwitch"][TDSkillParamID.GrassArea] = true;
    --                elseif paramKey == TDSkillParamID.FanSerachTarget then
    --                    row.fanSerachAngle = tonumber(paramValue);
    --                    row["paramsSwitch"][TDSkillParamID.FanSerachTarget] = true;
    --                elseif paramKey == TDSkillParamID.RemoveBulletOnDead then
    --                    row.removeBulletOnDead = tonumber(paramValue);
    --                    row["paramsSwitch"][TDSkillParamID.RemoveBulletOnDead] = true;
    --                elseif paramKey == TDSkillParamID.PriorFindTargetWithBuffID then
    --                    row.findTargetWithBuffID = tonumber(paramValue);
    --                    row["paramsSwitch"][TDSkillParamID.PriorFindTargetWithBuffID] = true;
    --                elseif paramKey == TDSkillParamID.DurationSkillDonotChangeTarget then
    --                    row["paramsSwitch"][TDSkillParamID.DurationSkillDonotChangeTarget] = true;
    --                elseif paramKey == TDSkillParamID.PlayEffectWhenSkillCannotReleaseByNoTarget then
    --                    row.effectIdWhenSkillCannotReleaseByNoTarget = tonumber(paramValue);
    --                    row["paramsSwitch"][TDSkillParamID.PlayEffectWhenSkillCannotReleaseByNoTarget] = true;
    --                end
    --            elseif #oneParam == 1 then
    --                if tonumber(oneParam[1]) == TDSkillParamID.GrassArea then
    --                    row["paramsSwitch"][TDSkillParamID.GrassArea] = true;
    --                end
    --            end
    --        end
    --    end
    --    row.isParamExsit = function(paramID)
    --        if row["paramsSwitch"] ~= nil and row["paramsSwitch"][paramID] ~= nil then
    --            return true;
    --        end
    --        return false;
    --    end;

    -- 伤害参数,暂时直接填写伤害数值
    -- if row["damageParams"] ~= "" then
    --     local damageParams = {};
    --     local param = string.split( row["damageParams"], ";" );
    --     for k,v in ipairs(param) do
    --         local splitArr = string.split(v,":");
    --         damageParams[tonumber(splitArr[1])]=tonumber(splitArr[2]);
    --     end
    --     row["damageParams"] = damageParams;
    -- else
    --     row["damageParams"] = nil;
    -- end

    -- 触发技能
    --    if row["triggerSkill"] ~= "" then
    --        row["triggerSkillSwitch"] = {};
    --        local param = string.split( row["triggerSkill"], ";" );
    --        for k, v in pairs(param) do
    --            local oneParam = string.split( v, ":" );
    --            if #oneParam == 2 then
    --                local onerecord = {skillID=tonumber(oneParam[1]); };

    --                local triggerParam = string.split( oneParam[2], "," );
    --                onerecord.triggerTime=tonumber(triggerParam[1]);
    --                if #triggerParam == 2 then
    --                    onerecord.triggerCondition=tonumber(triggerParam[2]);
    --                end
    --                table.insert( row["triggerSkillSwitch"], onerecord );
    --            end
    --        end
    --    end

    -- 伤害公式
    --    if row.buffDamageFormula ~= "" then
    --        local param = string.split( row.buffDamageFormula, ":" );
    --        -- 固定2个
    --        if #param == 2 then
    --            row.buffDamageFormulaList = {};
    --            table.insert( row.buffDamageFormulaList, tonumber(param[1]) );
    --            table.insert( row.buffDamageFormulaList, tonumber(param[2]) );
    --        end
    --    end

    --    if row.skillDamageFormula ~= "" then
    --        local param = string.split( row.skillDamageFormula, ":" );
    --        -- 固定2个
    --        if #param == 2 then
    --            row.skillDamageFormulaList = {};
    --            table.insert( row.skillDamageFormulaList, tonumber(param[1]) );
    --            table.insert( row.skillDamageFormulaList, tonumber(param[2]) );
    --        end
    --    end
end

function Unit.parser(row)
    -- row["CVariation"] = row["CVariation"] *0.01;
    -- row["CDamage"] = row["CDamage"] *0.01;
    -- row["sprayPower"] = row["sprayPower"] *0.01;
    -- row["CSpray"] = row["CSpray"] *0.01;
    -- if row["isFlying"] == 1 then
    --     row.isFlyUnit = true;
    -- else
    --     row.isFlyUnit = false;
    -- end
    -- -- scale
    -- if row["scale"] == "" then
    --     row["scale"] = 1.0;
    -- else
    --     row["scale"] = tonumber(row["scale"]);
    -- end
    -- --idleSpeed
    -- if row["idleSpeed"] == "" then
    --     row["idleSpeed"] = 1.0;
    -- else
    --     row["idleSpeed"] = tonumber(row["idleSpeed"]);
    -- end

    -- -- initSkill
    -- row.initSkillList = { };
    -- local templist1 = row.initSkill;
    -- local templist1 = string.split(templist1, ";");
    -- for k, v in pairs(templist1) do
    --     table.insert(row.initSkillList, tonumber(v));
    -- end

    -- if row["collisionBox"] ~= "" then
    --     local boxStrArr = string.split(row["collisionBox"], ",");
    --     assert(#boxStrArr == 4, "collisionBox 配置错误 %s", row["collisionBox"]);
    --     row["collisionBox"] = {["x"] = tonumber(boxStrArr[1]), ["y"] = tonumber(boxStrArr[2]), ["width"] = tonumber(boxStrArr[3]), ["height"] = tonumber(boxStrArr[4])}
    -- end

    -- clashInitSkill
    --    row.clashInitSkillList = {};
    --    local templist1 = row.clashInitSkill;
    --    local templist1 = string.split( templist1, ";" );
    --    for k, v in pairs(templist1) do
    --        table.insert( row.clashInitSkillList,  tonumber(v) );
    --    end

    -- row.price = string.split(row.price, ";");
    --    --敌人血量加成
    --    if row["group"] == TDForceType.Enemy then
    --        -- todo
    --        row["hp"] = row["hp"] ;--* TDCommonData.curEnemyHPValue;
    --    else
    --        --关卡攻击力加成
    --        -- todo
    --        row["attackPower"] = row["attackPower"] ;--* TDCommonData.curSelfAttackValue;
    --        row["spellPower"] = row["spellPower"];--*TDCommonData.curSelfAttackValue;
    --    end

    -- 竞技场和其他战斗 受伤获得能量区分
    -- row.powerRecoverWhenGetAttack_Other = nil;
    -- row.powerRecoverWhenGetAttack_Arena = nil;
    --    if row.powerRecoverWhenGetAttack ~= "" then
    --        local param = string.split( row["powerRecoverWhenGetAttack"], ";" );
    --        row.powerRecoverWhenGetAttack_Other = tonumber( param[2] );
    --        row.powerRecoverWhenGetAttack_Arena = tonumber( param[1] );
    --    end

    ----参数
    --    if row["param"] ~=nil and row["param"] ~= "" then
    --        row["paramsSwitch"] = {};
    --        local param = string.split( row["param"], ";" );
    --        for k, v in pairs(param) do
    --            local oneParam = string.split( param[k], ":" );
    --            if #oneParam == 2 then
    --                local paramKey = tonumber(oneParam[1]);
    --                local paramValue = oneParam[2];
    --                if paramKey == SoldierParamID.LOOT_GOLD then
    --                    row["paramsSwitch"][SoldierParamID.LOOT_GOLD] = paramValue;
    --                elseif paramKey == SoldierParamID.INITIAL_POWER then
    --                    row.initialPower = tonumber(paramValue);
    --                    row["paramsSwitch"][SoldierParamID.INITIAL_POWER] = true;
    --                elseif paramKey == SoldierParamID.HERO_FORCE_TYPE then
    --                    row.bIsEnemyHero = tonumber(paramValue) == 1;
    --                    row["paramsSwitch"][SoldierParamID.HERO_FORCE_TYPE] = true;
    --                end
    --            end
    --        end
    --    end
end

function Buff.parser(row)
    -- 参数
--    if row["params"] ~= "" then
--        row["paramsswitch"] = { };
--        local param = string.split(row["params"], ";");
--        for k, v in pairs(param) do
--            local oneparam = string.split(param[k], ":");
--            if #oneparam == 1 then
--                local paramkey = tonumber(oneparam[1])
--                if paramkey == buffprarmid.iceshader then
--                    row["paramsswitch"][buffprarmid.iceshader] = true;
--                elseif paramkey == buffprarmid.poisonshader then
--                    row["paramsswitch"][buffprarmid.poisonshader] = true;
--                end

--            elseif #oneparam == 2 then
--                local paramkey = tonumber(oneparam[1])
--                 *:***,***
--                if paramkey == buffprarmid.addbufftocurskill then
--                    local temp = string.split(oneparam[2], ",");
--                    row["paramsswitch"][buffprarmid.addbufftocurskill] = { buffid = tonumber(temp[1]); bufftime = tonumber(temp[2]); };
--                elseif paramkey == buffprarmid.triggerskill then
--                    local temp = string.split(oneparam[2], ",");
--                    row["paramsswitch"][buffprarmid.triggerskill] = { pveskillid = tonumber(temp[1]); pvpskillid = tonumber(temp[2]); };
--                elseif paramkey == buffprarmid.fastrunanimation then
--                    local temp = string.split(oneparam[2], ",");
--                    row["paramsswitch"][buffprarmid.fastrunanimation] = { animationname = temp[1]; };
--                elseif paramkey == buffprarmid.fastmoveawaydistance then
--                    local temp = string.split(oneparam[2], ",");
--                    row["paramsswitch"][buffprarmid.fastmoveawaydistance] = { awaydistance = tonumber(temp[1]); distancemode = tonumber(temp[2]); arivaleffectid = tonumber(temp[3]); animaseffect = tonumber(temp[4]); animtime = tonumber(temp[5]); animdelaytime = tonumber(temp[6]); };
--                elseif paramkey == buffprarmid.movespeed then
--                    local temp = string.split(oneparam[2], ",");
--                    row["paramsswitch"][buffprarmid.movespeed] = tonumber(temp[1]);
--                elseif paramkey == buffprarmid.serachtargetskillid then
--                    local temp = string.split(oneparam[2], ",");
--                    row["paramsswitch"][buffprarmid.serachtargetskillid] = tonumber(temp[1]);
--                elseif paramkey == buffprarmid.inverseanim then
--                    local temp = string.split(oneparam[2], ",");
--                    row["paramsswitch"][buffprarmid.inverseanim] = tonumber(temp[1]);
--                elseif paramkey == buffprarmid.invisiblehoster then
--                    local temp = string.split(oneparam[2], ",");
--                    row["paramsswitch"][buffprarmid.invisiblehoster] = tonumber(temp[1]);
--                end
--            end
--        end
--    end
--    row.isparamexsit = function(paramid)
--        if row["paramsswitch"] ~= nil and row["paramsswitch"][paramid] ~= nil then
--            return true;
--        end
--        return false;
--    end;

    -- -- 特效列表
    -- if row["effectID"] ~= "" then
    --     row["effectIDList"] = {};
    --     local Param = string.split( row["effectID"], ":" );
    --     for k, v in pairs(Param) do
    --         table.insert( row["effectIDList"], tonumber(v) );
    --     end
    -- end

    -- if row["startEffectID"] ~= "" then
    --     row["startEffectIDList"] = {};
    --     local param = string.split( row["startEffectID"], ";");
    --     for k, v in pairs(param) do
    --         local effectid = tonumber(v);
    --         if effectid and effectid > 0 then
    --             table.insert( row["startEffectIDList"], effectid);
    --         end
    --     end
    -- end

    -- if row["endEffectID"] ~= "" then
    --     row["endEffectIDList"] = {};
    --     local param = string.split( row["endEffectID"], ";");
    --     for k, v in pairs(param) do
    --         local effectid = tonumber(v);
    --         if effectid and effectid > 0 then
    --             table.insert( row["endEffectIDList"], effectid);
    --         end
    --     end
    -- end

--    -- buff触发条件
--    if row.triggercondition ~= "" then
--        row["triggerconditionswitch"] = { };
--        local param = string.split(row["triggercondition"], ";");
--        for k, v in pairs(param) do
--            local oneparam = string.split(param[k], ":");
--            if #oneparam == 2 then
--                local paramkey = tonumber(oneparam[1])
--                -- *:***,***,***
--                local temp = string.split(oneparam[2], ",");
--                --                    row["triggerconditionswitch"][paramkey] = {skilltype=tonumber(param[1]); damagetype=tonumber(param[2]); triggeroccasion=tonumber(param[3]);};
--                table.insert(row["triggerconditionswitch"], {
--                    triggergroup = paramkey; skilltype = tonumber(temp[1]);
--                    damagetype = tonumber(temp[2]); triggeroccasion = tonumber(temp[3]); skilltarget = tonumber(temp[4]);
--                } );
--            end
--        end
--    end

--    -- buff删除条件
--    if row.deletecondition ~= "" then
--        row.deleteconditionswitch = { };
--        local param = string.split(row.deletecondition, ";");
--        for k, v in pairs(param) do
--            local oneparam = string.split(param[k], ":");
--            if #oneparam == 1 then
--                local paramkey = tonumber(oneparam[1]);
--                if paramkey == buffdeletecondition.skillbreaked then
--                    row.deleteconditionswitch[buffdeletecondition.skillbreaked] = true;
--                elseif paramkey == buffdeletecondition.spelldead then
--                    row.deleteconditionswitch[buffdeletecondition.spelldead] = true;
--                end
--            elseif #oneparam == 2 then
--                local paramkey = tonumber(oneparam[1]);
--                local paramvalue = tonumber(oneparam[2]);
--                if paramkey == buffdeletecondition.spelldistance then
--                    row.deleteconditionswitch.squspelldistance = paramvalue * paramvalue;
--                elseif paramkey == buffdeletecondition.changestate then
--                    row.deleteconditionswitch[buffdeletecondition.changestate] = true;
--                    row.deleteconditionswitch.deleteonstate = paramvalue;
--                end
--            end
--        end
--    end
--    row.isdeleteconditionexsit = function(paramid)
--        if row.deleteconditionswitch ~= nil and row.deleteconditionswitch[paramid] ~= nil then
--            return true;
--        end
--        return false;
--    end;
end

function Effect.parser(row)
    -- 特效压缩
    --    row["compressX"] = 100;
    --    row["compressY"] = 100;
    --    if row["compress"] ~= "" then
    --        local Param = string.split( row["compress"], "," );
    --        for k, v in pairs(Param) do
    --            local SubParam = string.split( v, ":" );
    --            if SubParam[ 1 ] ~= nil and SubParam[ 2 ] ~= nil then
    --                if tonumber(SubParam[ 1 ]) == EffectCompressType.Vertical then
    --                    row["compressY"] = tonumber(SubParam[ 2 ]);
    --                elseif tonumber(SubParam[ 1 ]) == EffectCompressType.Horizontal then
    --                    row["compressX"] = tonumber(SubParam[ 2 ]);
    --                end
    --            end
    --        end
    --    end
end

-- function BulletEffect.parser(row)
--     -- 击中动画id
--     if row.animHitID ~= "" then
--         row.animHitIDList = { };
--         local Param = string.split(row.animHitID, ":");
--         for k, v in pairs(Param) do
--             table.insert(row.animHitIDList, tonumber(v));
--         end
--     end

--     -- 陷阱触发方式
--     if row.trappingType ~= "" then
--         row.trapInfo = { };
--         if row.trappingType == nil then
--             row.trapInfo.triggertype = TrapingTriggerType.WhenTargetEnter;
--         else
--             local param = string.split(row.trappingType, ";");
--             for k, v in pairs(param) do
--                 local subParam = string.split(v, ":");
--                 row.trapInfo.triggertype = tonumber(subParam[1]);
--                 if row.trapInfo.triggertype == TrapingTriggerType.TimeInterval then
--                     row.trapInfo.spacetime = tonumber(subParam[2]);
--                 end
--             end
--         end
--     end

--     -- 贯穿伤害改变
--     if row.damageRates ~= "" then
--         row.damageRageList = { };
--         local Param = string.split(row.damageRates, ",");
--         for k, v in pairs(Param) do
--             table.insert(row.damageRageList, tonumber(v) / 10000.0);
--         end
--     end
-- end

--function Quest.parser(row)
--    -- 任务跳转
--    if row.jump ~= "" then
--        -- ***:***
--        local Param = string.split(row.jump, ":");
--        row.jumpParam = { tonumber(Param[1]); Param[2]; Param[3]; Param[4]; };
--        if nil ~= Param[2] and tonumber(Param[2]) ~= nil then
--            row.jumpParam[2] = tonumber(Param[2]);
--        end
--    end

--    -- 完成条件
--    if row.condition ~= "" then
--        -- ***:***:***
--        local Param = string.split(row.condition, ":");
--        row.conditionParam = { tonumber(Param[1]); tonumber(Param[2]); tonumber(Param[3]); };
--    end

--    -- 奖励
--    if row.award ~= "" then
--        -- ***:***;***:***
--        local Param = string.split(row.award, ";");
--        row["awardSwitch"] = { };
--        for k, v in pairs(Param) do
--            local tempList = string.split(v, ":");
--            if #tempList == 2 then
--                if tonumber(tempList[1]) == ItemResourceType.TeamEXP then
--                    table.insert(row["awardSwitch"], 1, { awardID = tonumber(tempList[1]); awardNum = tonumber(tempList[2]); });
--                else
--                    table.insert(row["awardSwitch"], { awardID = tonumber(tempList[1]); awardNum = tonumber(tempList[2]); });
--                end
--            end
--        end
--    end

--    -- 时间
--    -- 每日显示时间
--    if row.DailyShowTime ~= "" then
--        local Param = string.split(row.DailyShowTime, ":");
--        row.DailyShowTimeSwitch = { };
--        if #Param == 3 then
--            row.DailyShowTimeSwitch.hour = tonumber(Param[1]);
--            row.DailyShowTimeSwitch.min = tonumber(Param[2]);
--            row.DailyShowTimeSwitch.sec = tonumber(Param[3]);
--        end
--    end
--    -- 每日开启时间
--    if row.DailyStartTime ~= "" then
--        local Param = string.split(row.DailyStartTime, ":");
--        row.DailyStartTimeSwitch = { };
--        if #Param == 3 then
--            row.DailyStartTimeSwitch.hour = tonumber(Param[1]);
--            row.DailyStartTimeSwitch.min = tonumber(Param[2]);
--            row.DailyStartTimeSwitch.sec = tonumber(Param[3]);
--        end
--    end
--    -- 每日关闭时间
--    if row.DailyCloseTime ~= "" then
--        local Param = string.split(row.DailyCloseTime, ":");
--        row.DailyCloseTimeSwitch = { };
--        if #Param == 3 then
--            row.DailyCloseTimeSwitch.hour = tonumber(Param[1]);
--            row.DailyCloseTimeSwitch.min = tonumber(Param[2]);
--            row.DailyCloseTimeSwitch.sec = tonumber(Param[3]);
--        end
--    end
--end

--function Shop.parser(row)
--    if row.refreshCost ~= "" then
--        local Param = string.split(row.refreshCost, ";");
--        row.refreshCostType = tonumber(Param[1]);
--        table.remove(Param, 1);
--        row.refreshCosts = Param;
--    end
--end

--function TDStage.parser(row)
--    row.vEnemyTag = { };
--    for i = 1, 5 do
--        local str = row["enemy" .. tostring(i)];
--        if str ~= "" then
--            local enemyIDs = string.split(str, ":");
--            if #enemyIDs >= 1 then
--                row.vEnemyTag[i] = { id = tonumber(enemyIDs[1]); isNew = false; isBoss = false; };
--                for k = 2, #enemyIDs, 1 do
--                    local tag = tonumber(enemyIDs[k]);
--                    if tag == mtGameGlobal().BOSS_ENEMY_TAG then
--                        row.vEnemyTag[i].isBoss = true;
--                    elseif tag == mtGameGlobal().NEW_ENEMY_TAG then
--                        row.vEnemyTag[i].isNew = true;
--                    end
--                end
--            end
--        end
--    end
--end
--function ClashStage.parser(row)
--    row.vEnemyTag = { };
--    for i = 1, 15 do
--        local str = row["enemy" .. tostring(i)];
--        if str ~= "" then
--            local enemyIDs = string.split(str, ":");
--            if #enemyIDs >= 1 then
--                row.vEnemyTag[i] = { id = tonumber(enemyIDs[1]); isNew = false; isBoss = false; };
--                for k = 2, #enemyIDs, 1 do
--                    local tag = tonumber(enemyIDs[k]);
--                    if tag == mtGameGlobal().BOSS_ENEMY_TAG then
--                        row.vEnemyTag[i].isBoss = true;
--                    elseif tag == mtGameGlobal().NEW_ENEMY_TAG then
--                        row.vEnemyTag[i].isNew = true;
--                    end
--                end
--            end
--        end
--    end
--end

--function LotterySet.parser(row)
--    if nil ~= row.lottery then
--        return;
--    end
--    row.lottery = { };
--    if row.sItem ~= "" then
--        local items = string.split(row.sItem, ";");
--        for i = 1, #items do
--            local itemTable = { };
--            local itemArray = string.split(items[i], ",");
--            itemTable.id = tonumber(itemArray[1]);
--            itemTable.count = tonumber(itemArray[2]);
--            table.insert(row.lottery, itemTable);
--        end
--    end
--end


--function ShadowMapSettings.parser(row)
--    if nil ~= row.sReward then
--        local itemArray = string.split(row.sReward, ",");
--        row.sRewardTable = { };
--        for i = 1, #itemArray do
--            local items = string.split(itemArray[i], ":");
--            table.insert(row.sRewardTable, { id = tonumber(items[1]), count = tonumber(items[2]) });
--        end
--        row.sReward = nil;
--    end
--    if nil ~= row.sOpenLevels then
--        local lvlArray = string.split(row.sOpenLevels, ",");
--        row.sOpenLvlTable = { };
--        for i = 1, #lvlArray do
--            local lvls = string.split(lvlArray[i], ":");
--            table.insert(row.sOpenLvlTable, { id = tonumber(lvls[1]), lvl = tonumber(lvls[2]) });
--        end
--        row.sOpenLevels = nil;
--    end
--    if nil ~= row.iOpenDayTime then
--        local timeArray = string.split(row.iOpenDayTime, ":");
--        row.iStartHour = tonumber(timeArray[1]);
--        row.iTotalHour = tonumber(timeArray[2]);
--        row.iOpenDayTime = nil;
--    end
--    if nil ~= row.sPositions then
--        local lvlArray = string.split(row.sPositions, ",");
--        row.positionX = 0;
--        row.positionY = 0;
--        for i = 1, #lvlArray do
--            local lvls = string.split(lvlArray[i], ":");
--            if tonumber(lvls[1]) == 1 then
--                row.positionX = tonumber(lvls[2]);
--            end
--            if tonumber(lvls[1]) == 2 then
--                row.positionY = tonumber(lvls[2]);
--            end
--        end
--        row.sPositions = nil;
--    end
--    if nil ~= row.sScales then
--        local lvlArray = string.split(row.sScales, ",");
--        row.scaleX = 0;
--        row.scaleY = 0;
--        for i = 1, #lvlArray do
--            local lvls = string.split(lvlArray[i], ":");
--            if tonumber(lvls[1]) == 1 then
--                row.scaleX = tonumber(lvls[2]);
--            end
--            if tonumber(lvls[1]) == 2 then
--                row.scaleY = tonumber(lvls[2]);
--            end
--        end
--        row.sScales = nil;
--    end
--    if nil ~= row.iOpenDayTime then
--        local lvls = string.split(row.iOpenDayTime, ":");
--        row.iOpenTime = tonumber(lvls[1]);
--        row.iOpenDayTime = nil;
--    end
--end

---- function AttrClac.parser(row)
----    if row.addition_hp~=nil then
----        local itemArray = string.split( row.addition_hp,";" );
----        row.mHp = {};
----        for k,v in ipairs(itemArray) do
----            row.mHp[k] = tonumber(v);
----        end
----        row.addition_hp = nil;
----    end

----    if row.addition_attackpower~=nil then
----        local itemArray = string.split( row.addition_attackpower,";" );
----        row.mAttackPower = {};
----        for k,v in ipairs(itemArray) do
----            row.mAttackPower[k] = tonumber(v);
----        end
----        row.addition_attackpower = nil;
----    end

----    if row.addition_spellpower~=nil then
----        local itemArray = string.split( row.addition_spellpower,";" );
----        row.mSpellPower = {};
----        for k,v in ipairs(itemArray) do
----            row.mSpellPower[k] = tonumber(v);
----        end
----        row.addition_spellpower = nil;
----    end

----    if row.addition_armor~=nil then
----        local itemArray = string.split( row.addition_armor,";" );
----        row.mArmor = {};
----        for k,v in ipairs(itemArray) do
----            row.mArmor[k] = tonumber(v);
----        end
----        row.addition_armor = nil;
----    end

----    if row.addition_magicResist~=nil then
----        local itemArray = string.split( row.addition_magicResist,";" );
----        row.mMagicResist = {};
----        for k,v in ipairs(itemArray) do
----            row.mMagicResist[k] = tonumber(v);
----        end
----        row.addition_magicResist = nil;
----    end
---- end

--function Face.parser(row)
--    if row.heroBKColor ~= nil then
--        local colorStrings = string.split(row.heroBKColor, ",");
--        row.color = cc.c4b(tonumber(colorStrings[1]), tonumber(colorStrings[2]), tonumber(colorStrings[3]), 255);
--        row.heroBKColor = nil;
--    end
--    if row.heroPosition ~= nil then
--        local positions = string.split(row.heroPosition, ",");
--        row.position = cc.p(tonumber(positions[1]), tonumber(positions[2]));
--        row.heroPosition = nil;
--    end
--end

-- function Building.parser(row)
--     if row.fieldSize ~= nil then
--         local fieldStrings = string.split(row.fieldSize, "_")
--         row.gridWidth = tonumber(fieldStrings[1])
--         row.gridHeight = tonumber(fieldStrings[2])
--         row.fieldSize = nil
--     end
--     if row.obstacleSize ~= nil then
--         row.obstacleRect = convertStrToRect(row.obstacleSize);
--         row.obstacleSize = nil;
--     end
-- end

-- function InnerBuilding.parser(row)
--     if row.fieldSize ~= nil then
--         local fieldStrings = string.split(row.fieldSize, "_")
--         row.gridWidth = tonumber(fieldStrings[1])
--         row.gridHeight = tonumber(fieldStrings[2])
--         row.fieldSize = nil
--     end
-- end

-- function Mine.parser(row)
--     if row.mapConfig == nil then
--         row.mapConfig = NotUserCityConfig[row.mapId]
--     end
-- end

-- function MonsterCity.parser(row)
--     if row.mapConfig == nil then
--         row.mapConfig = NotUserCityConfig[row.mapId]
--         --Mlog:lbsWrite("MonsterCity.parser(")
--     end
-- end

--[[
function MonsterWave.parser(row)
    if row.monsterSequence ~= nil then
        local monsterSequence = { };
        local sequence = string.split(row.monsterSequence, ";");
        if sequence ~= nil then
            for k, group in pairs(sequence) do
                local groupData = string.split(group, ":");
                local tempArr = string.split(groupData[1], ",");
                local grid = cc.p(tonumber(tempArr[1]), tonumber(tempArr[2]));
                tempArr = string.split(groupData[2], ",");
                local monsterId = tonumber(tempArr[1]);
                local monsterNum = tonumber(tempArr[2]);
                local groupInterval = tonumber(groupData[3]);
                table.insert(monsterSequence, {["grid"] = grid, ["monsterId"] = monsterId, ["monsterNum"] = monsterNum, ["interval"] = groupInterval});
            end
        end
        row.monsterSequence = monsterSequence;
    end
end
]]
-- function TowerPosition.parser(row)
--     if row.position ~= nil then
--         row.positions = {};
--         local arr = string.split(row.position, ";");
--         for _, str in ipairs(arr) do
--             local arr1 = string.split(str, ",");
--             table.insert( row.positions, { grid = cc.p(tonumber(arr1[1]), tonumber(arr1[2])), buildIndex = tonumber(arr1[3]) } );
--         end
--     end
-- end